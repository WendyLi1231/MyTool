######## lib-flexible + px2rem + scss + 全局scss变量 + 全局css #########
  npm i lib-flexible --save-dev
  
# 配置px2rem：
  npm i px2rem-loader --save-dev
  
# 引入main.js:    
  import 'lib-flexible/flexible.js'
  
# 配置build/utils.js:
  * cssLoader+px2remLoader:
  
    const cssLoader = {
		loader: 'css-loader',
		options: {
			minimize: process.env.NODE_ENV === 'production',
			sourceMap: options.sourceMap
		}
	}

	const px2remLoader = {
		loader: 'px2rem-loader',
		options: {
			remUnit: 75 //默认换算为1rem为75px，可根据你的原型图修改
		}
	}
	
  * 配置generateLoaders：
    function generateLoaders(loader, loaderOptions) {
		//				const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]
		const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader];
		if(loader) {　　
			loaders.push({　　
				loader: loader + '-loader',
				　　options: Object.assign({}, loaderOptions, {　　
					sourceMap: options.sourceMap　　
				})　　
			})　　
		}

		// Extract CSS when that option is specified
		// (which is the case during production build)

		if(options.extract) {　　
			return ExtractTextPlugin.extract({　　
				use: loaders,
				　　fallback: 'vue-style-loader'　　
			})　　
		} else {　　
			return ['vue-style-loader'].concat(loaders)　　
		}
	}
	
# 配置scss:
  * cnpm i sass-loader --save-dev
  * cnpm i node-sass --save-dev
  * 修改package.json:
    node-sass:4.11.1,
    sass-loader:7.3.0
  * 配置webpack.base.cpnf.js的rules增加:
    {
		test: /\.sass$/,
		loaders: ['style', 'css', 'scss']
	}
  * 使用时lang="scss"
  
# 配置全局scss变量：
  * cnpm i sass-resources-loader --save-dev
  * 配置build/utils.js:
    scss: generateLoaders('sass').concat({
		loader: 'sass-resources-loader',
		options: {
			resources: path.resolve(__dirname, '../static/css/baseset.scss')
		}
	}),

# 配置全局css：
  * main.js:
    import '../static/css/normalize.css'

